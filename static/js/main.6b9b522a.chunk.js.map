{"version":3,"sources":["lrp.js","App.js","serviceWorker.js","index.js"],"names":["isGenerates","line","mask","sum","forEach","val","index","sumArray","array1","array2","length","Array","fill","map","StyledHead","styled","h1","StyledInput","Input","StyledButton","Button","columns","title","dataIndex","key","App","useState","table","setTable","ref","useRef","className","placeholder","prefix","FieldBinaryOutlined","type","onClick","e","data","current","state","value","console","log","text","a","b","mPrevDeg","m","prototype","last","this","LRP","from","push","n","u","g","slice","reverse","lastG","right","left","k","i","str","v","getTable","String","dataSource","hideOnSinglePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b9b522a.chunk.js","sourcesContent":["const isGenerates = (line , mask) => {\r\n    // console.log(line)\r\n    // console.log(mask)\r\n    let sum = 0\r\n    mask.forEach((val, index) => {\r\n        if(val === 1 && line[index] === 1)\r\n            sum++\r\n    })\r\n    return !(sum%2)\r\n}\r\n\r\nconst sumArray = (array1, array2) => {\r\n    let sumArray\r\n\r\n    if(array1.length <= array2.length){\r\n        const tmp = [...Array(array2.length - array1.length).fill(0) , ...array1]\r\n        sumArray = tmp.map((val, index) => (\r\n            (val+array2[index])%2)\r\n        )\r\n    }\r\n    else if(array1.length > array2.length){\r\n        const tmp = [...Array(array1.length - array2.length).fill(0) , ...array2]\r\n        sumArray = tmp.map((val, index) => (\r\n            (val+array1[index])%2)\r\n        )\r\n    }\r\n    return sumArray\r\n}\r\n\r\n\r\nexport const getTable = (text) => {\r\n    const line = ` ${text}`\r\n    console.log(line)\r\n\r\n    let mPrevDeg = 0\r\n    let m = 0\r\n    let a,b\r\n\r\n    Array.prototype.last = function() {\r\n        return this[this.length - 1];\r\n    }\r\n\r\n    const table = []\r\n    let index;\r\n    let LRP = Array.from(line)\r\n    for(index = 0; index < LRP.length; index++){\r\n        if(index === 0) table.push({\r\n            n: index,\r\n            u : null,\r\n            a : null,\r\n            b : null,\r\n            g : [1]\r\n        })\r\n        if(LRP[index] === '0'){\r\n            table.push({\r\n                n : index,\r\n                u : LRP[index],\r\n                a : null,\r\n                b : null,\r\n                g : table.last().g\r\n            })\r\n        }\r\n        if(LRP[index] === '1'){\r\n            table.push({\r\n                n : index,\r\n                u : LRP[index],\r\n                a : null,\r\n                b : null,\r\n                g : [1 , ...Array(index - 1).fill(0), 1]\r\n            })\r\n            m = index\r\n            mPrevDeg = 0\r\n            index++\r\n            break\r\n        }\r\n    }\r\n\r\n    for(; index < LRP.length; index++){\r\n        // console.log(index)\r\n        // console.log(`m = ${m} mPrevDeg = ${mPrevDeg}`)\r\n\r\n        const slice = Array.from(line).slice(1,index+1).map(e => +e).reverse()\r\n        const lastG = table.last().g\r\n        const isGen = isGenerates(slice , lastG)\r\n        // console.log(slice, lastG , isGen)\r\n\r\n        if(isGen) {\r\n            table.push({\r\n                n : index ,\r\n                u : LRP[index],\r\n                a : null,\r\n                b : null,\r\n                g : lastG\r\n            })\r\n        }\r\n        else {\r\n            a = m - mPrevDeg\r\n            b = index - (table.last().g.length - 1)\r\n            console.log(a, b)\r\n\r\n            if(a >= b){\r\n                const right = [...table[m-1].g , ...Array(a-b).fill(0)]\r\n                const left = [...table[index - 1].g]\r\n                table.push({\r\n                    n: index,\r\n                    u: LRP[index],\r\n                    a: a,\r\n                    b: b,\r\n                    g: sumArray(right,left)\r\n                })\r\n\r\n                if(table[index].g.length - 1 > table[m].g.length - 1) {\r\n                    m = index;\r\n                    mPrevDeg = table[index - 1].g.length - 1\r\n                }\r\n            }\r\n\r\n\r\n\r\n            else if(a < b) {\r\n                const left = [...table[index-1].g , ...Array(b-a).fill(0)]\r\n                const right = [...table[m-1].g]\r\n                table.push({\r\n                    n: index,\r\n                    u: LRP[index],\r\n                    a: a,\r\n                    b: b,\r\n                    g: sumArray(right,left)\r\n                })\r\n                if(table[index].g.length - 1 > table[m].g.length - 1) {\r\n                    m = index;\r\n                    mPrevDeg = table[index - 1].g.length - 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    let k = []\r\n    /*\r\n    table.forEach(val => {\r\n\r\n        if(val.g){\r\n            let str = ``\r\n            val.g.forEach((v,index) => {\r\n                if(v === 1 ) {\r\n                    str += index !== 0 ? ` + ` : ``\r\n                    str += index !== val.g.length - 1 ? `x${val.g.length - 1 - index}` : `1`\r\n                }\r\n            })\r\n            console.log(`n: ${val.n}\\tu: ${val.u}\\ta: ${val.a}\\t\\tb: ${val.b}\\t\\tg: ${str} `)\r\n        }\r\n    })\r\n    */\r\n\r\n    for(let i = 0; i < table.length; i++){\r\n        let str = ``\r\n        table[i].g.forEach((v,index) => {\r\n            if(v === 1 ) {\r\n                str += index !== 0 ? ` + ` : ``\r\n                str += index !== table[i].g.length - 1 ? `x${table[i].g.length - 1 - index}` : `1`\r\n            }\r\n        })\r\n\r\n        k.push({\r\n            key: table[i].n,\r\n            n: table[i].n,\r\n            u: table[i].u ? table[i].u : '-',\r\n            a: table[i].a ? table[i].a : '-',\r\n            b: table[i].b ? table[i].b : '-',\r\n            g: str ? str : '-'\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return k\r\n}\r\n\r\n// console.log(getTable('010110'))\r\n\r\n\r\n\r\n\r\n","import React, {useRef, useState} from 'react';\nimport './App.css';\nimport { Input , Table, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport styled from 'styled-components'\nimport { FieldBinaryOutlined } from '@ant-design/icons';\nimport {getTable} from './lrp';\n\n\nconst StyledHead = styled.h1`\n  margin-top: 50px;\n`\n\nconst StyledInput = styled(Input)`\n  margin-top: 15px;\n  width: 400px;\n  margin-bottom: 5px;\n`\n\nconst StyledButton = styled(Button)`\n  margin-bottom: 20px;\n`\n\nconst columns = [\n    {\n        title: 'N',\n        dataIndex: 'n',\n        key: 'n',\n    },\n    {\n        title: 'U',\n        dataIndex: 'u',\n        key: 'u',\n    },\n    {\n        title: 'a',\n        dataIndex: 'a',\n        key: 'a',\n    },\n    {\n        title: 'b',\n        key: 'b',\n        dataIndex: 'b',\n    },\n    {\n        title: 'G',\n        key: 'action',\n        dataIndex: 'g'\n    },\n]\n\nconst data = [\n    {\n        key: '1',\n        n: '1',\n        u: '2',\n        a: '-',\n        b: 'b',\n        G: 'abc'\n    },\n]\n\nfunction App() {\n\n    const [table, setTable] = useState(null)\n    const ref = useRef()\n\n    const onClick = (e) => {\n        let data = ref.current.state.value\n        // console.log(String(data))\n        let isAcceptable = true\n\n        console.log(isAcceptable)\n        if(isAcceptable) {\n            console.log('kek')\n            setTable(getTable(String(data)))\n        }\n\n    }\n\n    return (\n        <div className=\"app-wrapper\">\n            <StyledHead>BM Algorithm</StyledHead>\n            <StyledInput placeholder=\"Enter constant-recursive sequence\"\n                   prefix={<FieldBinaryOutlined/>}\n                   ref={ref}\n            />\n            <StyledButton type=\"primary\"\n                          onClick={onClick}\n            >\n                Calculate\n            </StyledButton>\n            <Table columns={columns}\n                   dataSource={table} hideOnSinglePage\n                   // pagination={{ position: ['none', 'none'] , style : {display: \"none\"}}}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}